{
	// Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Print value to console": {
		"scope": "javascript,typescript",
		"prefix": "log",
		"body": [
            "console.log(${1:$CLIPBOARD}$0)"
		],
		"description": "console.log"
    },

    "Print string to console": {
		"scope": "javascript,typescript",
		"prefix": "logs",
		"body": [
            "console.log('${1:$CLIPBOARD}$0')"
		],
		"description": "console.log"
    },

    "Print string and value to console": {
		"scope": "javascript,typescript",
		"prefix": "logg",
		"body": [
            "console.log('${1:$CLIPBOARD}$0', ${2:$CLIPBOARD})"
		],
		"description": "console.log"
    },

    "Print to console": {
		"scope": "javascript,typescript",
		"prefix": "loggg",
		"body": [
            "console.log($0)"
		],
		"description": "console.log"
    },

    "Debounce": {
        "scope": "javascript,typescript",
        "prefix": "js debounce",
        "body": [
            "/**",
            " * @description 防抖，在一系列触发 时延 后，执行一次回调函数",
            " * @param {Function} func 回调函数，防抖触发的回调函数",
            " * @param {Number} delay 时延，单位毫秒，默认值为300",
            " * @returns 返回一个防抖函数",
            " */",
            "function debounce(func, delay = 300) {",
            "    let timeout = null;",
            "    return function() {",
            "        timeout && clearTimeout(timeout);",
            "        timeout = setTimeout(() => {",
            "            func.apply(this, arguments);",
            "        }, delay)",
            "    }",
            "}$0"
        ],
        "description": "JS 防抖函数"
    },

    "Throttle": {
        "scope": "javascript,typescript",
        "prefix": "js throttle",
        "body": [
            "/**",
            " * @description 节流，在一系列触发中，每间隔 一段时延 就执行回调函数",
            " * @param {Function} func 回调函数，节流触发的回调函数",
            " * @param {Number} delay 时延，单位毫秒，默认值为300",
            " * @returns 返回一个节流函数",
            " */",
            "function throttle(func, delay = 300) {",
            "    let timeout = null;",
            "    return function() {",
            "        if(timeout) return",
            "        func.apply(this, arguments);",
            "        timeout = setTimeout(() => {",
            "            timeout = null;",
            "        }, delay);",
            "    }",
            "}$0"
        ],
        "description": "JS 节流函数"
    },

    "Id": {
        "scope": "javascript,typescript",
        "prefix": "js id",
        "body": [
            "/**",
            " * @description 生成能够获取自增id的对象，对象拥有set与get方法",
            " * @param {Number} init 初始值",
            " * @param {Number} stepIncrement 自增步长",
            " */",
            "function ${1:id}(init = 0, stepIncrement = 1) {",
            "    let id = init;",
            "    let increment = stepIncrement;",
            "    return {",
            "        set(val = 0, stepIncrement2) {",
            "            id = val;",
            "            increment = stepIncrement2 ? stepIncrement2 : increment;",
            "        },",
            "        get() {",
            "            id += increment;",
            "            return id - increment;",
            "        }",
            "    }",
            "}$0"
        ],
        "description": "js 自增函数"
    },

    "Conver Date": {
        "scope": "javascript,typescript",
        "prefix": "js convertDate",
        "body": [
            "/**",
            " * @description 将Date对象转换成字符串",
            " * @param {Date} date 表示日期的Date对象",
            " * @returns 返回一个日期字符串",
            " */",
            "function converDate(date) {",
            "    let year = date.getFullYear(); // 年份",
            "    let month = date.getMonth() + 1; // 月份",
            "    month = (month < 10) ? \"0\" + month : month;",
            "    let day = date.getDate();",
            "    day = (day < 10) ? \"0\" + day : day;",
            "",
            "    return year + \"-\" + month + \"-\" + day;",
            "}"
        ],
        "description": "JS 转换日期函数"
    },

    "Conver Time": {
        "scope": "javascript,typescript",
        "prefix": "js converTime",
        "body": [
            "/**",
            " * @description 将Date对象或数组 转换成 字符串String",
            " * @param {String | Date | Array} date 表示日期的数据",
            " * @returns 返回一个日期字符串",
            " */",
            "function converTime(date) {",
            "    let type = Object.prototype.toString.call(date);",
            "    let ret = \"\";",
            "    switch (type) {",
            "        case \"[object Date]\":",
            "            ret = converDate(date);",
            "            break;",
            "",
            "        case \"[object Array]\":",
            "            let retArray = [];",
            "            for(let item of date) {",
            "                let itemType = Object.prototype.toString.call(item);",
            "                if(itemType === \"[object String]\") {",
            "                    retArray.push(item);",
            "                } else if(itemType === \"[object Date]\") {",
            "                    retArray.push(converDate(item));",
            "                }",
            "            }",
            "            ret = retArray.join(\" ~ \");",
            "            break;",
            "",
            "        case \"[object String]\":",
            "        default:",
            "            ret = date;",
            "            break;",
            "    }",
            "    return ret;",
            "}"
        ],
        "description": "JS 转换时间函数"
    },

    "Get Type": {
        "scope": "javascript,typescript",
        "prefix": "js getType",
        "body": [
            "function getType(val) {",
            "    return Object.prototype.toString.call(val).slice(8, -1);",
            "}"
        ],
        "description": "JS 获取数据类型函数"
    },

    "Deep Clone": {
        "scope": "javascript,typescript",
        "prefix": "js deepClone",
        "body": [
            "/**",
            " * @description JS深拷贝",
            " * @param {*} obj ",
            " */",
            "function deepClone(obj) {",
            "    let copyed_objs = []; // 此数组解决循环引用和相同引用问题，存放已经递归的目标对象",
            "    function deepCopy(target) {",
            "        const type = Object.prototype.toString.call(target).slice(8, -1);",
            "        if(type === \"Object\" || type === \"Array\") {",
            "            for(let i = 0, l = copyed_objs.length; i < l; i++) {",
            "                if(copyed_objs[i].target === target) {",
            "                    return copyed_objs[i].copyTarget;",
            "                }",
            "            }",
            "            let copyTarget = type === \"Object\" ? {} : [];",
            "            copyed_objs.push({target, copyTarget});",
            "            Object.keys(target).forEach(key => {",
            "                copyTarget[key] = deepCopy(target[key]);",
            "            })",
            "            return copyTarget;",
            "        } else {",
            "            return target",
            "        }",
            "    }",
            "    return deepCopy(obj);",
            "}"
        ],
        "description": "JS 深拷贝函数"
    },

    "Notify": {
        "scope": "javascript,typescript",
        "prefix": "js notify",
        "body": [
            "/**",
            " * @param {String} title 通知的标题",
            " * @param {Object} optiosn 一些操作项",
            " * @return {Object} notification",
            " */",
            "function notify(title, options = {}, closeDelay = 3000) {",
            "    let notification = null;",
            "    if(!(\"Notification\" in window)) {",
            "        console.warn(\"This browser doesn't support desktop notifications\");",
            "        alert(\"This browser doesn't support desktop notifications\");",
            "    } else if(Notification.permission === \"granted\") {",
            "        notification = new Notification(title, options);",
            "    } else if(Notification.permission !== \"denied\") {",
            "        Notification.requestPermission((permission) => {",
            "            if(permission === \"granted\") {",
            "                notification = new Notification(title, options);",
            "            } else {",
            "                console.warn(\"You need change the permission of notification in browser settting.\")",
            "            }",
            "        })",
            "    } else if(Notification.permission === \"denied\") {",
            "        console.warn(\"You need change the permission of notification in browser settting.\")",
            "    }",
            "    if(notification) {",
            "        setTimeout(() => {",
            "            notification.close()",
            "        }, closeDelay)",
            "    }",
            "    return notification;",
            "}"
        ],
        "description": ""
    }
}